From 8b3504fc4bc56b9420c7719ee47e6c29df6086c6 Mon Sep 17 00:00:00 2001
From: Marcos Felipe <marcosfas.dev@gmail.com>
Date: Wed, 3 Sep 2025 19:31:14 -0300
Subject: [PATCH 6/6] feat(Estacionamento.Data, Estacionamento.Domain): Add
 classe basica de service, repository e entidade. Ajuste no docker e
 docker-compose para conectar ao banco do container

---
 Estacionamento/Dockerfile                     |   6 +-
 Estacionamento/Dockerfile_DEV                 |  17 ++
 .../Controllers/VeiculoController.cs          |  38 +++++
 .../Estacionamento.Api.csproj                 |  17 ++
 Estacionamento/Estacionamento.Api/Program.cs  |  27 ++++
 .../Properties/launchSettings.json            |  30 ++++
 Estacionamento/Estacionamento.Api/Startup.cs  |  81 ++++++++++
 .../appsettings.Development.json              |   9 ++
 .../Estacionamento.Api/appsettings.json       |  10 ++
 .../Context/ApplicationContext.cs             |  34 +++-
 .../EstacionamentoConfiguration.cs            |  46 +++---
 .../Configurations/VeiculoConfiguration.cs    |   1 +
 .../Context/ContextApplication.cs             |  19 ---
 .../Context/Migrations/PrimeiraMigration.SQL  |  56 +++++++
 .../Estacionamento.Data.csproj                |  10 +-
 ...250902011812_PrimeiraMigration.Designer.cs | 103 ++++++++++++
 .../20250902011812_PrimeiraMigration.cs       |  61 ++++++++
 .../ApplicationContextModelSnapshot.cs        | 101 ++++++++++++
 .../Migrations/PrimeiraMigration.SQL          |  56 +++++++
 .../Repository/BaseRepository.cs              |  50 ++++++
 .../Repository/VeiculoRepository.cs           |  24 +++
 .../DomainObjects/DomainException.cs          |  11 ++
 .../DomainObjects/Entity.cs                   |  56 +++++++
 .../DomainObjects/IAggregateRoot.cs           |   4 +
 .../Validations/BaseValidations.cs            | 147 ++++++++++++++++++
 .../Estacionamento/EstacionamentoBasico.cs    |   1 +
 .../Entidades/Proprietario.cs                 |  24 +--
 .../Entidades/Veiculo.cs                      |  33 ++--
 .../Interfaces/Repository/Data/IRepository.cs |  18 +++
 .../Repository/Data/IUnityOfWork.cs           |   9 ++
 .../Repository/IVeiculoRepository.cs          |  13 ++
 .../Interfaces/Service/IService.cs            |  16 ++
 .../Interfaces/Service/IVeiculoService.cs     |  12 ++
 .../Services/BaseService.cs                   |  39 +++++
 .../Services/VeiculoService.cs                |  24 +++
 Estacionamento/Estacionamento.sln             |  30 +++-
 Estacionamento/docker-compose.yml             |   7 +-
 37 files changed, 1169 insertions(+), 71 deletions(-)
 create mode 100644 Estacionamento/Dockerfile_DEV
 create mode 100644 Estacionamento/Estacionamento.Api/Controllers/VeiculoController.cs
 create mode 100644 Estacionamento/Estacionamento.Api/Estacionamento.Api.csproj
 create mode 100644 Estacionamento/Estacionamento.Api/Program.cs
 create mode 100644 Estacionamento/Estacionamento.Api/Properties/launchSettings.json
 create mode 100644 Estacionamento/Estacionamento.Api/Startup.cs
 create mode 100644 Estacionamento/Estacionamento.Api/appsettings.Development.json
 create mode 100644 Estacionamento/Estacionamento.Api/appsettings.json
 delete mode 100644 Estacionamento/Estacionamento.Data/Context/ContextApplication.cs
 create mode 100644 Estacionamento/Estacionamento.Data/Context/Migrations/PrimeiraMigration.SQL
 create mode 100644 Estacionamento/Estacionamento.Data/Migrations/20250902011812_PrimeiraMigration.Designer.cs
 create mode 100644 Estacionamento/Estacionamento.Data/Migrations/20250902011812_PrimeiraMigration.cs
 create mode 100644 Estacionamento/Estacionamento.Data/Migrations/ApplicationContextModelSnapshot.cs
 create mode 100644 Estacionamento/Estacionamento.Data/Migrations/PrimeiraMigration.SQL
 create mode 100644 Estacionamento/Estacionamento.Data/Repository/BaseRepository.cs
 create mode 100644 Estacionamento/Estacionamento.Data/Repository/VeiculoRepository.cs
 create mode 100644 Estacionamento/Estacionamento.Domain/DomainObjects/DomainException.cs
 create mode 100644 Estacionamento/Estacionamento.Domain/DomainObjects/Entity.cs
 create mode 100644 Estacionamento/Estacionamento.Domain/DomainObjects/IAggregateRoot.cs
 create mode 100644 Estacionamento/Estacionamento.Domain/DomainObjects/Validations/BaseValidations.cs
 create mode 100644 Estacionamento/Estacionamento.Domain/Interfaces/Repository/Data/IRepository.cs
 create mode 100644 Estacionamento/Estacionamento.Domain/Interfaces/Repository/Data/IUnityOfWork.cs
 create mode 100644 Estacionamento/Estacionamento.Domain/Interfaces/Repository/IVeiculoRepository.cs
 create mode 100644 Estacionamento/Estacionamento.Domain/Interfaces/Service/IService.cs
 create mode 100644 Estacionamento/Estacionamento.Domain/Interfaces/Service/IVeiculoService.cs
 create mode 100644 Estacionamento/Estacionamento.Domain/Services/BaseService.cs
 create mode 100644 Estacionamento/Estacionamento.Domain/Services/VeiculoService.cs

diff --git a/Estacionamento/Dockerfile b/Estacionamento/Dockerfile
index 353b606..3fbc891 100644
--- a/Estacionamento/Dockerfile
+++ b/Estacionamento/Dockerfile
@@ -1,7 +1,7 @@
 FROM mcr.microsoft.com/dotnet/sdk:3.1 AS build
 WORKDIR /src
 
-COPY Estacionamento.Console/Estacionamento.App.csproj Estacionamento.Console/
+COPY Estacionamento.Api/Estacionamento.Api.csproj Estacionamento.Api/
 COPY Estacionamento.Domain/Estacionamento.Domain.csproj Estacionamento.Domain/
 COPY Estacionamento.Data/Estacionamento.Data.csproj Estacionamento.Data/
 COPY Estacionamento.Tests/Estacionamento.Tests.csproj Estacionamento.Tests/
@@ -11,11 +11,11 @@ RUN dotnet restore Estacionamento.sln
 
 COPY . .
 
-WORKDIR /src/Estacionamento.Console
+WORKDIR /src/Estacionamento.Api
 RUN dotnet publish -c Release -o /app/publish
 
 # Runtime
 FROM mcr.microsoft.com/dotnet/aspnet:3.1 AS final
 WORKDIR /app
 COPY --from=build /app/publish .
-ENTRYPOINT [ "dotnet", "Estacionamento.App.dll" ]
+ENTRYPOINT [ "dotnet", "Estacionamento.Api.dll" ]
diff --git a/Estacionamento/Dockerfile_DEV b/Estacionamento/Dockerfile_DEV
new file mode 100644
index 0000000..646188f
--- /dev/null
+++ b/Estacionamento/Dockerfile_DEV
@@ -0,0 +1,17 @@
+FROM mcr.microsoft.com/dotnet/sdk:3.1 AS build
+WORKDIR /app
+
+# Copia csproj e restaura dependências
+COPY Estacionamento.Api/Estacionamento.Api.csproj Estacionamento.Api/
+COPY Estacionamento.Domain/Estacionamento.Domain.csproj Estacionamento.Domain/
+COPY Estacionamento.Data/Estacionamento.Data.csproj Estacionamento.Data/
+COPY Estacionamento.Tests/Estacionamento.Tests.csproj Estacionamento.Tests/
+COPY Estacionamento.sln .
+RUN dotnet restore
+
+# Copia o resto do código
+COPY . .
+
+# Entrypoint muda no docker-compose (dotnet watch run), então aqui basta:
+ENTRYPOINT ["dotnet", "watch", "run", "--urls", "http://0.0.0.0:80", "--project", "Estacionamento.Api"]
+
diff --git a/Estacionamento/Estacionamento.Api/Controllers/VeiculoController.cs b/Estacionamento/Estacionamento.Api/Controllers/VeiculoController.cs
new file mode 100644
index 0000000..9c216e4
--- /dev/null
+++ b/Estacionamento/Estacionamento.Api/Controllers/VeiculoController.cs
@@ -0,0 +1,38 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Threading.Tasks;
+using Estacionamento.Domain.Entidades;
+using Estacionamento.Domain.Interfaces.Service;
+using Microsoft.AspNetCore.Mvc;
+using Microsoft.Extensions.Logging;
+
+namespace Estacionamento.Api.Controllers
+{
+    [ApiController]
+    [Route("[controller]")]
+    public class VeiculoController : ControllerBase
+    {
+        private readonly ILogger<VeiculoController> _logger;
+        private readonly IVeiculoService _service;
+
+        public VeiculoController(IVeiculoService service, ILogger<VeiculoController> logger)
+        {
+            _service = service;
+            _logger = logger;
+        }
+
+        [HttpGet]
+        public async Task<IEnumerable<Veiculo>> ObterTodos()
+        {
+            var retorno = await _service.ObterTodos();
+            return retorno;
+        }
+
+        [HttpGet("/{id}")]
+        public async Task<IEnumerable<Veiculo>> ObterTodos(Guid id)
+        {
+            var retorno = await _service.ObterTodos();
+            return retorno;
+        }
+    }
+}
diff --git a/Estacionamento/Estacionamento.Api/Estacionamento.Api.csproj b/Estacionamento/Estacionamento.Api/Estacionamento.Api.csproj
new file mode 100644
index 0000000..56739f4
--- /dev/null
+++ b/Estacionamento/Estacionamento.Api/Estacionamento.Api.csproj
@@ -0,0 +1,17 @@
+<Project Sdk="Microsoft.NET.Sdk.Web">
+
+  <PropertyGroup>
+    <TargetFramework>netcoreapp3.1</TargetFramework>
+  </PropertyGroup>
+
+  <ItemGroup>
+    <ProjectReference Include="..\Estacionamento.Data\Estacionamento.Data.csproj" />
+    <ProjectReference Include="..\Estacionamento.Domain\Estacionamento.Domain.csproj" />
+  </ItemGroup>
+
+  <ItemGroup>
+    <PackageReference Include="Swashbuckle.AspNetCore" Version="5.6.3" />
+  </ItemGroup>
+
+
+</Project>
diff --git a/Estacionamento/Estacionamento.Api/Program.cs b/Estacionamento/Estacionamento.Api/Program.cs
new file mode 100644
index 0000000..b66d9c9
--- /dev/null
+++ b/Estacionamento/Estacionamento.Api/Program.cs
@@ -0,0 +1,27 @@
+using Estacionamento.Data.Context;
+using Estacionamento.Data.Repository;
+using Estacionamento.Domain.Interfaces.Repository;
+using Estacionamento.Domain.Interfaces.Repository.Data;
+using Estacionamento.Domain.Interfaces.Service;
+using Estacionamento.Domain.Services;
+using Microsoft.AspNetCore.Hosting;
+using Microsoft.Extensions.DependencyInjection;
+using Microsoft.Extensions.Hosting;
+
+namespace Estacionamento.Api
+{
+    public class Program
+    {
+        public static void Main(string[] args)
+        {
+            CreateHostBuilder(args).Build().Run();
+        }
+
+       public static IHostBuilder CreateHostBuilder(string[] args) =>
+            Host.CreateDefaultBuilder(args)
+                .ConfigureWebHostDefaults(webBuilder =>
+                {
+                    webBuilder.UseStartup<Startup>();
+                });
+    }
+}
diff --git a/Estacionamento/Estacionamento.Api/Properties/launchSettings.json b/Estacionamento/Estacionamento.Api/Properties/launchSettings.json
new file mode 100644
index 0000000..861ac07
--- /dev/null
+++ b/Estacionamento/Estacionamento.Api/Properties/launchSettings.json
@@ -0,0 +1,30 @@
+﻿{
+  "$schema": "http://json.schemastore.org/launchsettings.json",
+  "iisSettings": {
+    "windowsAuthentication": false,
+    "anonymousAuthentication": true,
+    "iisExpress": {
+      "applicationUrl": "http://localhost:60781",
+      "sslPort": 44391
+    }
+  },
+  "profiles": {
+    "IIS Express": {
+      "commandName": "IISExpress",
+      "launchBrowser": true,
+      "launchUrl": "weatherforecast",
+      "environmentVariables": {
+        "ASPNETCORE_ENVIRONMENT": "Development"
+      }
+    },
+    "Estacionamento.Api": {
+      "commandName": "Project",
+      "launchBrowser": true,
+      "launchUrl": "weatherforecast",
+      "applicationUrl": "https://localhost:5001;http://localhost:5000",
+      "environmentVariables": {
+        "ASPNETCORE_ENVIRONMENT": "Development"
+      }
+    }
+  }
+}
diff --git a/Estacionamento/Estacionamento.Api/Startup.cs b/Estacionamento/Estacionamento.Api/Startup.cs
new file mode 100644
index 0000000..a68709a
--- /dev/null
+++ b/Estacionamento/Estacionamento.Api/Startup.cs
@@ -0,0 +1,81 @@
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Threading.Tasks;
+using Estacionamento.Data.Context;
+using Estacionamento.Data.Repository;
+using Estacionamento.Domain.Interfaces.Repository;
+using Estacionamento.Domain.Interfaces.Repository.Data;
+using Estacionamento.Domain.Interfaces.Service;
+using Estacionamento.Domain.Services;
+using Microsoft.AspNetCore.Builder;
+using Microsoft.AspNetCore.Hosting;
+using Microsoft.AspNetCore.HttpsPolicy;
+using Microsoft.AspNetCore.Mvc;
+using Microsoft.Extensions.Configuration;
+using Microsoft.Extensions.DependencyInjection;
+using Microsoft.Extensions.Hosting;
+using Microsoft.Extensions.Logging;
+
+namespace Estacionamento.Api
+{
+    public class Startup
+    {
+        public Startup(IConfiguration configuration)
+        {
+            Configuration = configuration;
+        }
+
+        public IConfiguration Configuration { get; }
+
+        // This method gets called by the runtime. Use this method to add services to the container.
+        public void ConfigureServices(IServiceCollection services)
+        {
+            services.AddDbContext<ApplicationContext>();
+            services.AddScoped<IVeiculoRepository, VeiculoRepository>();
+            services.AddScoped<IVeiculoService, VeiculoService>();
+            services.AddScoped(typeof(IRepository<>), typeof(BaseRepository<>));
+
+            services.AddControllers(); // <-- essencial para mapear controllers
+            _ = services.AddSwaggerGen(c =>
+            {
+                c.SwaggerDoc("v1", new Microsoft.OpenApi.Models.OpenApiInfo
+                {
+                    Title = "Estacionamento API",
+                    Version = "v1"
+                });
+            });
+        }
+
+        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
+        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
+        {
+            if (env.IsDevelopment())
+            {
+                app.UseDeveloperExceptionPage();
+            }
+
+            //app.UseHttpsRedirection();
+
+            app.UseRouting();
+
+            app.UseWelcomePage("/");
+
+            app.UseAuthorization();
+
+            app.UseSwagger();
+            app.UseSwaggerUI(c =>
+            {
+                c.SwaggerEndpoint("/swagger/v1/swagger.json", "Estacionamento API v1");
+            });
+
+            app.UseSwagger();
+            app.UseSwaggerUI();
+
+            app.UseEndpoints(endpoints =>
+            {
+                endpoints.MapControllers();
+            });
+        }
+    }
+}
diff --git a/Estacionamento/Estacionamento.Api/appsettings.Development.json b/Estacionamento/Estacionamento.Api/appsettings.Development.json
new file mode 100644
index 0000000..8983e0f
--- /dev/null
+++ b/Estacionamento/Estacionamento.Api/appsettings.Development.json
@@ -0,0 +1,9 @@
+{
+  "Logging": {
+    "LogLevel": {
+      "Default": "Information",
+      "Microsoft": "Warning",
+      "Microsoft.Hosting.Lifetime": "Information"
+    }
+  }
+}
diff --git a/Estacionamento/Estacionamento.Api/appsettings.json b/Estacionamento/Estacionamento.Api/appsettings.json
new file mode 100644
index 0000000..d9d9a9b
--- /dev/null
+++ b/Estacionamento/Estacionamento.Api/appsettings.json
@@ -0,0 +1,10 @@
+{
+  "Logging": {
+    "LogLevel": {
+      "Default": "Information",
+      "Microsoft": "Warning",
+      "Microsoft.Hosting.Lifetime": "Information"
+    }
+  },
+  "AllowedHosts": "*"
+}
diff --git a/Estacionamento/Estacionamento.Data/Context/ApplicationContext.cs b/Estacionamento/Estacionamento.Data/Context/ApplicationContext.cs
index def60c2..72e91bf 100644
--- a/Estacionamento/Estacionamento.Data/Context/ApplicationContext.cs
+++ b/Estacionamento/Estacionamento.Data/Context/ApplicationContext.cs
@@ -1,11 +1,21 @@
-using Estacionamento.Data.Context.Configurations;
+using Estacionamento.Domain.Entidades;
+using Estacionamento.Domain.Interfaces.Repository.Data;
 using Microsoft.EntityFrameworkCore;
+using System;
+using System.Linq;
+using System.Threading.Tasks;
 
 namespace Estacionamento.Data.Context
 {
-    public class ApplicationContext : DbContext
+    public class ApplicationContext : DbContext, IUnityOfWork
     {
-        private readonly string _connectionString = "Data source=(localdb)\\mssqllocaldb;Initial Catalog=Estacionamento;Integrated Security=true";
+
+        private readonly string _connectionString = "Data source=db-sqlserver,1433\\sql1;Initial Catalog=Estacionamento;User Id=sa;Password=admin@SqlServerDocker2025";
+        
+        public DbSet<Veiculo> Veiculos { get; set; }
+        public DbSet<Proprietario> Proprietarios { get; set; }
+        //public DbSet<EstacionamentoBasico> Estacionamentos { get; set; }
+
         protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
         {
             optionsBuilder.UseSqlServer(_connectionString);
@@ -15,5 +25,23 @@ namespace Estacionamento.Data.Context
         {
             modelBuilder.ApplyConfigurationsFromAssembly(typeof(ApplicationContext).Assembly);
         }
+
+        public async Task<bool> Commit()
+        {
+            foreach (var entry in ChangeTracker.Entries().Where(entry => entry.Entity.GetType().GetProperty("DataCadastro") != null))
+            {
+                if(entry.State == EntityState.Added)
+                {
+                    entry.Property("DataCadastro").CurrentValue = DateTime.Now;
+                }
+
+                if (entry.State == EntityState.Modified)
+                {
+                    entry.Property("DataCadastro").IsModified = false;
+                }
+            }
+
+            return await base.SaveChangesAsync() > 0;
+        }
     }
 }
\ No newline at end of file
diff --git a/Estacionamento/Estacionamento.Data/Context/Configurations/EstacionamentoConfiguration.cs b/Estacionamento/Estacionamento.Data/Context/Configurations/EstacionamentoConfiguration.cs
index e56d37d..3378412 100644
--- a/Estacionamento/Estacionamento.Data/Context/Configurations/EstacionamentoConfiguration.cs
+++ b/Estacionamento/Estacionamento.Data/Context/Configurations/EstacionamentoConfiguration.cs
@@ -4,31 +4,31 @@ using Microsoft.EntityFrameworkCore.Metadata.Builders;
 
 namespace Estacionamento.Data.Context.Configurations
 {
-    public class EstacionamentoConfiguration : IEntityTypeConfiguration<EstacionamentoBasico>
-    {
-        public void Configure(EntityTypeBuilder<EstacionamentoBasico> builder)
-        {
-            builder.ToTable("Estacionamento");
+    //public class EstacionamentoConfiguration : IEntityTypeConfiguration<EstacionamentoBasico>
+    //{
+    //    public void Configure(EntityTypeBuilder<EstacionamentoBasico> builder)
+    //    {
+    //        builder.ToTable("Estacionamento");
 
-            builder.HasKey("Id");
-            builder.Property(x => x.Id)
-                .IsRequired()
-                .HasColumnType("VARCHAR(50)")
-                .HasColumnName("Id");
+    //        builder.HasKey("Id");
+    //        builder.Property(x => x.Id)
+    //            .IsRequired()
+    //            .HasColumnType("VARCHAR(50)")
+    //            .HasColumnName("Id");
 
-            builder.Property(x => x.DataAcesso)
-                .IsRequired()
-                .HasColumnType("DATETIME")
-                .HasColumnName("DataAcesso");
+    //        builder.Property(x => x.DataAcesso)
+    //            .IsRequired()
+    //            .HasColumnType("DATETIME")
+    //            .HasColumnName("DataAcesso");
 
-            builder.Property(x => x.DataHoraEntrada)
-                .IsRequired()
-                .HasColumnType("DATETIME")
-                .HasColumnName("DataHoraEntrada");
+    //        builder.Property(x => x.DataHoraEntrada)
+    //            .IsRequired()
+    //            .HasColumnType("DATETIME")
+    //            .HasColumnName("DataHoraEntrada");
 
-            builder.Property(x => x.DataHoraSaida)
-                .HasColumnType("DATETIME")
-                .HasColumnName("DataHoraSaida");
-        }
-    }
+    //        builder.Property(x => x.DataHoraSaida)
+    //            .HasColumnType("DATETIME")
+    //            .HasColumnName("DataHoraSaida");
+    //    }
+    //}
 }
\ No newline at end of file
diff --git a/Estacionamento/Estacionamento.Data/Context/Configurations/VeiculoConfiguration.cs b/Estacionamento/Estacionamento.Data/Context/Configurations/VeiculoConfiguration.cs
index f9b3a89..a1aa8f4 100644
--- a/Estacionamento/Estacionamento.Data/Context/Configurations/VeiculoConfiguration.cs
+++ b/Estacionamento/Estacionamento.Data/Context/Configurations/VeiculoConfiguration.cs
@@ -1,3 +1,4 @@
+using Estacionamento.Domain.Entidades;
 using Microsoft.EntityFrameworkCore;
 using Microsoft.EntityFrameworkCore.Metadata.Builders;
 
diff --git a/Estacionamento/Estacionamento.Data/Context/ContextApplication.cs b/Estacionamento/Estacionamento.Data/Context/ContextApplication.cs
deleted file mode 100644
index def60c2..0000000
--- a/Estacionamento/Estacionamento.Data/Context/ContextApplication.cs
+++ /dev/null
@@ -1,19 +0,0 @@
-using Estacionamento.Data.Context.Configurations;
-using Microsoft.EntityFrameworkCore;
-
-namespace Estacionamento.Data.Context
-{
-    public class ApplicationContext : DbContext
-    {
-        private readonly string _connectionString = "Data source=(localdb)\\mssqllocaldb;Initial Catalog=Estacionamento;Integrated Security=true";
-        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
-        {
-            optionsBuilder.UseSqlServer(_connectionString);
-        }
-
-        protected override void OnModelCreating(ModelBuilder modelBuilder)
-        {
-            modelBuilder.ApplyConfigurationsFromAssembly(typeof(ApplicationContext).Assembly);
-        }
-    }
-}
\ No newline at end of file
diff --git a/Estacionamento/Estacionamento.Data/Context/Migrations/PrimeiraMigration.SQL b/Estacionamento/Estacionamento.Data/Context/Migrations/PrimeiraMigration.SQL
new file mode 100644
index 0000000..1e6eced
--- /dev/null
+++ b/Estacionamento/Estacionamento.Data/Context/Migrations/PrimeiraMigration.SQL
@@ -0,0 +1,56 @@
+﻿IF OBJECT_ID(N'[__EFMigrationsHistory]') IS NULL
+BEGIN
+    CREATE TABLE [__EFMigrationsHistory] (
+        [MigrationId] nvarchar(150) NOT NULL,
+        [ProductVersion] nvarchar(32) NOT NULL,
+        CONSTRAINT [PK___EFMigrationsHistory] PRIMARY KEY ([MigrationId])
+    );
+END;
+
+GO
+
+IF NOT EXISTS(SELECT * FROM [__EFMigrationsHistory] WHERE [MigrationId] = N'20250902011812_PrimeiraMigration')
+BEGIN
+    CREATE TABLE [Proprietario] (
+        [Id] VARCHAR(50) NOT NULL,
+        [Nome] VARCHAR(150) NOT NULL,
+        [Cnh] BIGINT NOT NULL,
+        [Telefone] CHAR(13) NOT NULL,
+        [Celular] CHAR(13) NOT NULL,
+        [Endereco] VARCHAR(200) NOT NULL,
+        CONSTRAINT [PK_Proprietario] PRIMARY KEY ([Id])
+    );
+END;
+
+GO
+
+IF NOT EXISTS(SELECT * FROM [__EFMigrationsHistory] WHERE [MigrationId] = N'20250902011812_PrimeiraMigration')
+BEGIN
+    CREATE TABLE [Veiculo] (
+        [Id] VARCHAR(50) NOT NULL,
+        [Marca] VARCHAR(25) NOT NULL,
+        [Modelo] VARCHAR(50) NOT NULL,
+        [Placa] CHAR(8) NOT NULL,
+        [ProprietarioId] VARCHAR(50) NOT NULL,
+        CONSTRAINT [PK_Veiculo] PRIMARY KEY ([Id]),
+        CONSTRAINT [FK_Veiculo_Proprietario_ProprietarioId] FOREIGN KEY ([ProprietarioId]) REFERENCES [Proprietario] ([Id]) ON DELETE CASCADE
+    );
+END;
+
+GO
+
+IF NOT EXISTS(SELECT * FROM [__EFMigrationsHistory] WHERE [MigrationId] = N'20250902011812_PrimeiraMigration')
+BEGIN
+    CREATE INDEX [IX_Veiculo_ProprietarioId] ON [Veiculo] ([ProprietarioId]);
+END;
+
+GO
+
+IF NOT EXISTS(SELECT * FROM [__EFMigrationsHistory] WHERE [MigrationId] = N'20250902011812_PrimeiraMigration')
+BEGIN
+    INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
+    VALUES (N'20250902011812_PrimeiraMigration', N'3.1.32');
+END;
+
+GO
+
diff --git a/Estacionamento/Estacionamento.Data/Estacionamento.Data.csproj b/Estacionamento/Estacionamento.Data/Estacionamento.Data.csproj
index 8df1553..8cb55de 100644
--- a/Estacionamento/Estacionamento.Data/Estacionamento.Data.csproj
+++ b/Estacionamento/Estacionamento.Data/Estacionamento.Data.csproj
@@ -5,7 +5,15 @@
   </PropertyGroup>
 
   <ItemGroup>
-    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="3.1.5" />
+    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="3.1.32">
+      <PrivateAssets>all</PrivateAssets>
+      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
+    </PackageReference>
+    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="3.1.32" />
+    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="3.1.32">
+      <PrivateAssets>all</PrivateAssets>
+      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
+    </PackageReference>
   </ItemGroup>
 
   <ItemGroup>
diff --git a/Estacionamento/Estacionamento.Data/Migrations/20250902011812_PrimeiraMigration.Designer.cs b/Estacionamento/Estacionamento.Data/Migrations/20250902011812_PrimeiraMigration.Designer.cs
new file mode 100644
index 0000000..e00a0cc
--- /dev/null
+++ b/Estacionamento/Estacionamento.Data/Migrations/20250902011812_PrimeiraMigration.Designer.cs
@@ -0,0 +1,103 @@
+﻿// <auto-generated />
+using Estacionamento.Data.Context;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Infrastructure;
+using Microsoft.EntityFrameworkCore.Metadata;
+using Microsoft.EntityFrameworkCore.Migrations;
+using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
+
+namespace Estacionamento.Data.Migrations
+{
+    [DbContext(typeof(ApplicationContext))]
+    [Migration("20250902011812_PrimeiraMigration")]
+    partial class PrimeiraMigration
+    {
+        protected override void BuildTargetModel(ModelBuilder modelBuilder)
+        {
+#pragma warning disable 612, 618
+            modelBuilder
+                .HasAnnotation("ProductVersion", "3.1.32")
+                .HasAnnotation("Relational:MaxIdentifierLength", 128)
+                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
+
+            modelBuilder.Entity("Estacionamento.Domain.Entidades.Proprietario", b =>
+                {
+                    b.Property<string>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnName("Id")
+                        .HasColumnType("VARCHAR(50)");
+
+                    b.Property<string>("Celular")
+                        .IsRequired()
+                        .HasColumnName("Celular")
+                        .HasColumnType("CHAR(13)");
+
+                    b.Property<string>("Endereco")
+                        .IsRequired()
+                        .HasColumnName("Endereco")
+                        .HasColumnType("VARCHAR(200)");
+
+                    b.Property<string>("Nome")
+                        .IsRequired()
+                        .HasColumnName("Nome")
+                        .HasColumnType("VARCHAR(150)");
+
+                    b.Property<long>("NumeroCarteiraNacionalDeHabilitacao")
+                        .HasColumnName("Cnh")
+                        .HasColumnType("BIGINT");
+
+                    b.Property<string>("Telefone")
+                        .IsRequired()
+                        .HasColumnName("Telefone")
+                        .HasColumnType("CHAR(13)");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Proprietario");
+                });
+
+            modelBuilder.Entity("Estacionamento.Domain.Entidades.Veiculo", b =>
+                {
+                    b.Property<string>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnName("Id")
+                        .HasColumnType("VARCHAR(50)");
+
+                    b.Property<string>("Marca")
+                        .IsRequired()
+                        .HasColumnName("Marca")
+                        .HasColumnType("VARCHAR(25)");
+
+                    b.Property<string>("Modelo")
+                        .IsRequired()
+                        .HasColumnName("Modelo")
+                        .HasColumnType("VARCHAR(50)");
+
+                    b.Property<string>("Placa")
+                        .IsRequired()
+                        .HasColumnName("Placa")
+                        .HasColumnType("CHAR(8)");
+
+                    b.Property<string>("ProprietarioId")
+                        .IsRequired()
+                        .HasColumnType("VARCHAR(50)");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("ProprietarioId");
+
+                    b.ToTable("Veiculo");
+                });
+
+            modelBuilder.Entity("Estacionamento.Domain.Entidades.Veiculo", b =>
+                {
+                    b.HasOne("Estacionamento.Domain.Entidades.Proprietario", "Proprietario")
+                        .WithMany("Veiculos")
+                        .HasForeignKey("ProprietarioId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+                });
+#pragma warning restore 612, 618
+        }
+    }
+}
diff --git a/Estacionamento/Estacionamento.Data/Migrations/20250902011812_PrimeiraMigration.cs b/Estacionamento/Estacionamento.Data/Migrations/20250902011812_PrimeiraMigration.cs
new file mode 100644
index 0000000..01fdcd5
--- /dev/null
+++ b/Estacionamento/Estacionamento.Data/Migrations/20250902011812_PrimeiraMigration.cs
@@ -0,0 +1,61 @@
+﻿using Microsoft.EntityFrameworkCore.Migrations;
+
+namespace Estacionamento.Data.Migrations
+{
+    public partial class PrimeiraMigration : Migration
+    {
+        protected override void Up(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.CreateTable(
+                name: "Proprietario",
+                columns: table => new
+                {
+                    Id = table.Column<string>(type: "VARCHAR(50)", nullable: false),
+                    Nome = table.Column<string>(type: "VARCHAR(150)", nullable: false),
+                    Cnh = table.Column<long>(type: "BIGINT", nullable: false),
+                    Telefone = table.Column<string>(type: "CHAR(13)", nullable: false),
+                    Celular = table.Column<string>(type: "CHAR(13)", nullable: false),
+                    Endereco = table.Column<string>(type: "VARCHAR(200)", nullable: false)
+                },
+                constraints: table =>
+                {
+                    table.PrimaryKey("PK_Proprietario", x => x.Id);
+                });
+
+            migrationBuilder.CreateTable(
+                name: "Veiculo",
+                columns: table => new
+                {
+                    Id = table.Column<string>(type: "VARCHAR(50)", nullable: false),
+                    Marca = table.Column<string>(type: "VARCHAR(25)", nullable: false),
+                    Modelo = table.Column<string>(type: "VARCHAR(50)", nullable: false),
+                    Placa = table.Column<string>(type: "CHAR(8)", nullable: false),
+                    ProprietarioId = table.Column<string>(nullable: false)
+                },
+                constraints: table =>
+                {
+                    table.PrimaryKey("PK_Veiculo", x => x.Id);
+                    table.ForeignKey(
+                        name: "FK_Veiculo_Proprietario_ProprietarioId",
+                        column: x => x.ProprietarioId,
+                        principalTable: "Proprietario",
+                        principalColumn: "Id",
+                        onDelete: ReferentialAction.Cascade);
+                });
+
+            migrationBuilder.CreateIndex(
+                name: "IX_Veiculo_ProprietarioId",
+                table: "Veiculo",
+                column: "ProprietarioId");
+        }
+
+        protected override void Down(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.DropTable(
+                name: "Veiculo");
+
+            migrationBuilder.DropTable(
+                name: "Proprietario");
+        }
+    }
+}
diff --git a/Estacionamento/Estacionamento.Data/Migrations/ApplicationContextModelSnapshot.cs b/Estacionamento/Estacionamento.Data/Migrations/ApplicationContextModelSnapshot.cs
new file mode 100644
index 0000000..cb60f3c
--- /dev/null
+++ b/Estacionamento/Estacionamento.Data/Migrations/ApplicationContextModelSnapshot.cs
@@ -0,0 +1,101 @@
+﻿// <auto-generated />
+using Estacionamento.Data.Context;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Infrastructure;
+using Microsoft.EntityFrameworkCore.Metadata;
+using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
+
+namespace Estacionamento.Data.Migrations
+{
+    [DbContext(typeof(ApplicationContext))]
+    partial class ApplicationContextModelSnapshot : ModelSnapshot
+    {
+        protected override void BuildModel(ModelBuilder modelBuilder)
+        {
+#pragma warning disable 612, 618
+            modelBuilder
+                .HasAnnotation("ProductVersion", "3.1.32")
+                .HasAnnotation("Relational:MaxIdentifierLength", 128)
+                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
+
+            modelBuilder.Entity("Estacionamento.Domain.Entidades.Proprietario", b =>
+                {
+                    b.Property<string>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnName("Id")
+                        .HasColumnType("VARCHAR(50)");
+
+                    b.Property<string>("Celular")
+                        .IsRequired()
+                        .HasColumnName("Celular")
+                        .HasColumnType("CHAR(13)");
+
+                    b.Property<string>("Endereco")
+                        .IsRequired()
+                        .HasColumnName("Endereco")
+                        .HasColumnType("VARCHAR(200)");
+
+                    b.Property<string>("Nome")
+                        .IsRequired()
+                        .HasColumnName("Nome")
+                        .HasColumnType("VARCHAR(150)");
+
+                    b.Property<long>("NumeroCarteiraNacionalDeHabilitacao")
+                        .HasColumnName("Cnh")
+                        .HasColumnType("BIGINT");
+
+                    b.Property<string>("Telefone")
+                        .IsRequired()
+                        .HasColumnName("Telefone")
+                        .HasColumnType("CHAR(13)");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Proprietario");
+                });
+
+            modelBuilder.Entity("Estacionamento.Domain.Entidades.Veiculo", b =>
+                {
+                    b.Property<string>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnName("Id")
+                        .HasColumnType("VARCHAR(50)");
+
+                    b.Property<string>("Marca")
+                        .IsRequired()
+                        .HasColumnName("Marca")
+                        .HasColumnType("VARCHAR(25)");
+
+                    b.Property<string>("Modelo")
+                        .IsRequired()
+                        .HasColumnName("Modelo")
+                        .HasColumnType("VARCHAR(50)");
+
+                    b.Property<string>("Placa")
+                        .IsRequired()
+                        .HasColumnName("Placa")
+                        .HasColumnType("CHAR(8)");
+
+                    b.Property<string>("ProprietarioId")
+                        .IsRequired()
+                        .HasColumnType("VARCHAR(50)");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("ProprietarioId");
+
+                    b.ToTable("Veiculo");
+                });
+
+            modelBuilder.Entity("Estacionamento.Domain.Entidades.Veiculo", b =>
+                {
+                    b.HasOne("Estacionamento.Domain.Entidades.Proprietario", "Proprietario")
+                        .WithMany("Veiculos")
+                        .HasForeignKey("ProprietarioId")
+                        .OnDelete(DeleteBehavior.Cascade)
+                        .IsRequired();
+                });
+#pragma warning restore 612, 618
+        }
+    }
+}
diff --git a/Estacionamento/Estacionamento.Data/Migrations/PrimeiraMigration.SQL b/Estacionamento/Estacionamento.Data/Migrations/PrimeiraMigration.SQL
new file mode 100644
index 0000000..1e6eced
--- /dev/null
+++ b/Estacionamento/Estacionamento.Data/Migrations/PrimeiraMigration.SQL
@@ -0,0 +1,56 @@
+﻿IF OBJECT_ID(N'[__EFMigrationsHistory]') IS NULL
+BEGIN
+    CREATE TABLE [__EFMigrationsHistory] (
+        [MigrationId] nvarchar(150) NOT NULL,
+        [ProductVersion] nvarchar(32) NOT NULL,
+        CONSTRAINT [PK___EFMigrationsHistory] PRIMARY KEY ([MigrationId])
+    );
+END;
+
+GO
+
+IF NOT EXISTS(SELECT * FROM [__EFMigrationsHistory] WHERE [MigrationId] = N'20250902011812_PrimeiraMigration')
+BEGIN
+    CREATE TABLE [Proprietario] (
+        [Id] VARCHAR(50) NOT NULL,
+        [Nome] VARCHAR(150) NOT NULL,
+        [Cnh] BIGINT NOT NULL,
+        [Telefone] CHAR(13) NOT NULL,
+        [Celular] CHAR(13) NOT NULL,
+        [Endereco] VARCHAR(200) NOT NULL,
+        CONSTRAINT [PK_Proprietario] PRIMARY KEY ([Id])
+    );
+END;
+
+GO
+
+IF NOT EXISTS(SELECT * FROM [__EFMigrationsHistory] WHERE [MigrationId] = N'20250902011812_PrimeiraMigration')
+BEGIN
+    CREATE TABLE [Veiculo] (
+        [Id] VARCHAR(50) NOT NULL,
+        [Marca] VARCHAR(25) NOT NULL,
+        [Modelo] VARCHAR(50) NOT NULL,
+        [Placa] CHAR(8) NOT NULL,
+        [ProprietarioId] VARCHAR(50) NOT NULL,
+        CONSTRAINT [PK_Veiculo] PRIMARY KEY ([Id]),
+        CONSTRAINT [FK_Veiculo_Proprietario_ProprietarioId] FOREIGN KEY ([ProprietarioId]) REFERENCES [Proprietario] ([Id]) ON DELETE CASCADE
+    );
+END;
+
+GO
+
+IF NOT EXISTS(SELECT * FROM [__EFMigrationsHistory] WHERE [MigrationId] = N'20250902011812_PrimeiraMigration')
+BEGIN
+    CREATE INDEX [IX_Veiculo_ProprietarioId] ON [Veiculo] ([ProprietarioId]);
+END;
+
+GO
+
+IF NOT EXISTS(SELECT * FROM [__EFMigrationsHistory] WHERE [MigrationId] = N'20250902011812_PrimeiraMigration')
+BEGIN
+    INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
+    VALUES (N'20250902011812_PrimeiraMigration', N'3.1.32');
+END;
+
+GO
+
diff --git a/Estacionamento/Estacionamento.Data/Repository/BaseRepository.cs b/Estacionamento/Estacionamento.Data/Repository/BaseRepository.cs
new file mode 100644
index 0000000..79a4f08
--- /dev/null
+++ b/Estacionamento/Estacionamento.Data/Repository/BaseRepository.cs
@@ -0,0 +1,50 @@
+﻿using Estacionamento.Data.Context;
+using Estacionamento.Domain.DomainObjects;
+using Estacionamento.Domain.Interfaces.Repository.Data;
+using Microsoft.EntityFrameworkCore;
+using System;
+using System.Collections.Generic;
+using System.Threading.Tasks;
+
+namespace Estacionamento.Data.Repository
+{
+    public class BaseRepository<T> : IRepository<T> where T : class, IAggregateRoot
+    {
+        protected readonly ApplicationContext _applicationContext;
+        protected readonly DbSet<T> _context;
+
+        public BaseRepository(ApplicationContext context)
+        {
+            _applicationContext = context;
+            _context = _applicationContext.Set<T>();
+        }
+
+        public IUnityOfWork UnityOfWork => _applicationContext;
+
+        public async Task<IEnumerable<T>> ObterTodos()
+        {
+            return await _context.AsNoTracking().ToListAsync();
+        }
+
+        public async Task<T> ObterPorId(Guid id)
+        {
+            return await _context.AsNoTracking()
+                .FirstOrDefaultAsync(x => EF.Property<Guid>(x, "Id") == id);
+        }
+
+        public void Adicionar(T model)
+        {
+            _context.Add(model);
+        }
+
+        public void Atualizar(T model)
+        {
+            _context.Update(model);
+        }
+
+        public void Dispose()
+        {
+            _applicationContext?.Dispose();
+        }
+    }
+}
diff --git a/Estacionamento/Estacionamento.Data/Repository/VeiculoRepository.cs b/Estacionamento/Estacionamento.Data/Repository/VeiculoRepository.cs
new file mode 100644
index 0000000..50caa15
--- /dev/null
+++ b/Estacionamento/Estacionamento.Data/Repository/VeiculoRepository.cs
@@ -0,0 +1,24 @@
+﻿using Estacionamento.Data.Context;
+using Estacionamento.Domain.Entidades;
+using Estacionamento.Domain.Interfaces.Repository;
+using Microsoft.EntityFrameworkCore;
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Threading.Tasks;
+
+namespace Estacionamento.Data.Repository
+{
+    public class VeiculoRepository : BaseRepository<Veiculo>, IVeiculoRepository
+    {
+        public VeiculoRepository(ApplicationContext context) : base(context) { }
+
+        public async Task<IEnumerable<Veiculo>> ObterPorProprietario(Guid proprietarioId)
+        {
+            return await _context.AsNoTracking()
+                .Include(x => x.Proprietario)
+                .Where(x => x.ProprietarioId == proprietarioId)
+                .ToListAsync();
+        }
+    }
+}
diff --git a/Estacionamento/Estacionamento.Domain/DomainObjects/DomainException.cs b/Estacionamento/Estacionamento.Domain/DomainObjects/DomainException.cs
new file mode 100644
index 0000000..711576d
--- /dev/null
+++ b/Estacionamento/Estacionamento.Domain/DomainObjects/DomainException.cs
@@ -0,0 +1,11 @@
+﻿using System;
+
+namespace Estacionamento.Domain.DomainObjects
+{
+    public class DomainException : Exception
+    {
+        public DomainException() { }
+        public DomainException(string message) : base(message) { }
+        public DomainException(string message, Exception innerException) : base(message, innerException) { }
+    }
+}
diff --git a/Estacionamento/Estacionamento.Domain/DomainObjects/Entity.cs b/Estacionamento/Estacionamento.Domain/DomainObjects/Entity.cs
new file mode 100644
index 0000000..2452d21
--- /dev/null
+++ b/Estacionamento/Estacionamento.Domain/DomainObjects/Entity.cs
@@ -0,0 +1,56 @@
+﻿using Estacionamento.Domain.DomainObjects.Validations;
+using System;
+
+namespace Estacionamento.Domain.DomainObjects
+{
+    public abstract class Entity
+    {
+        public Entity()
+        {
+            Id = Guid.NewGuid();
+        }
+
+        public Guid Id { get; private set; }
+
+        public override bool Equals(object obj)
+        {
+            var compareTo = obj as Entity;
+
+            if(ReferenceEquals(this, compareTo)) return true;
+            if(ReferenceEquals(null, compareTo)) return false;
+
+            return base.Equals(obj);
+        }
+
+        public static bool operator ==(Entity a, Entity b)
+        {
+            if (ReferenceEquals(null, a) && ReferenceEquals(null, b))
+                return true;
+
+            if (ReferenceEquals(null, a) || ReferenceEquals(null, b))
+                return false;
+
+            return a.Equals(b);
+        }
+
+        public static bool operator != (Entity a, Entity b)
+        {
+           return !(a == b);
+        }
+
+        public override string ToString()
+        {
+            return $"{GetType()} [Id = {Id}]";
+        }
+
+        public override int GetHashCode()
+        {
+            return (GetType().GetHashCode() & 667)  + Id.GetHashCode();
+        }
+
+        public virtual void Validar()
+        {
+            BaseValidations.ValidarEhDiferente(Id, Guid.Empty, "");
+        }
+    }
+}
diff --git a/Estacionamento/Estacionamento.Domain/DomainObjects/IAggregateRoot.cs b/Estacionamento/Estacionamento.Domain/DomainObjects/IAggregateRoot.cs
new file mode 100644
index 0000000..46e3a22
--- /dev/null
+++ b/Estacionamento/Estacionamento.Domain/DomainObjects/IAggregateRoot.cs
@@ -0,0 +1,4 @@
+﻿namespace Estacionamento.Domain.DomainObjects
+{
+    public interface IAggregateRoot { }
+}
diff --git a/Estacionamento/Estacionamento.Domain/DomainObjects/Validations/BaseValidations.cs b/Estacionamento/Estacionamento.Domain/DomainObjects/Validations/BaseValidations.cs
new file mode 100644
index 0000000..146b21a
--- /dev/null
+++ b/Estacionamento/Estacionamento.Domain/DomainObjects/Validations/BaseValidations.cs
@@ -0,0 +1,147 @@
+﻿using System.Text.RegularExpressions;
+
+namespace Estacionamento.Domain.DomainObjects.Validations
+{
+    public class BaseValidations
+    {
+        public static void ValidarEhIgual(object obj1, object obj2, string message)
+        {
+            if(!obj1.Equals(obj2))
+            {
+                throw new DomainException(message);
+            }
+        }
+
+        public static void ValidarEhDiferente(object obj1, object obj2, string message)
+        {
+            if (obj1.Equals(obj2))
+            {
+                throw new DomainException(message);
+            }
+        }
+
+        public static void ValidarCaracteres(string value, int max, string message)
+        {
+            var valueLenth = value.Trim().Length;
+            if (valueLenth > max)
+            {
+                throw new DomainException(message);
+            }
+        }
+
+
+        public static void ValidarCaracteres(string value, int min, int max, string message)
+        {
+            var valueLenth = value.Trim().Length;
+            if (valueLenth > max || valueLenth < min)
+            {
+                throw new DomainException(message);
+            }
+        }
+
+        public static void ValidarExpressao(string pattern, string value, string message)
+        {
+            var regex = new Regex(pattern);
+            if (!regex.IsMatch(value))
+            {
+                throw new DomainException(message);
+            }
+        }
+
+        public static void ValidarSeNulo(object value, string message)
+        {
+            if (value is null)
+            {
+                throw new DomainException(message);
+            }
+        }
+
+        public static void ValidarSeVazio(string value, string message)
+        {
+            if (value is null || value.Trim().Length == 0)
+            {
+                throw new DomainException(message);
+            }
+        }
+
+        public static void ValidarMinimoVaximo(decimal value, decimal min, decimal max, string message)
+        {
+            if (value < min || value > max)
+            {
+                throw new DomainException(message);
+            }
+        }
+
+        public static void ValidarMinimoVaximo(double value, double min, double max, string message)
+        {
+            if (value < min || value > max)
+            {
+                throw new DomainException(message);
+            }
+        }
+
+        public static void ValidarMinimoVaximo(float value, float min, float max, string message)
+        {
+            if (value < min || value > max)
+            {
+                throw new DomainException(message);
+            }
+        }
+
+        public static void ValidarMinimoVaximo(int value, int min, int max, string message)
+        {
+            if (value < min || value > max)
+            {
+                throw new DomainException(message);
+            }
+        }
+
+        public static void ValidarSeMenorIgualMinimo(decimal value, decimal min, string message)
+        {
+            if (value <= min)
+            {
+                throw new DomainException(message);
+            }
+        }
+
+        public static void ValidarSeMenorIgualMinimo(double value, double min, string message)
+        {
+            if (value <= min)
+            {
+                throw new DomainException(message);
+            }
+        }
+
+        public static void ValidarSeMenorIgualMinimo(float value, float min, string message)
+        {
+            if (value <= min)
+            {
+                throw new DomainException(message);
+            }
+        }
+
+        public static void ValidarSeMenorIgualMinimo(int value, int min, string message)
+        {
+            if (value <= min)
+            {
+                throw new DomainException(message);
+            }
+        }
+
+        public static void ValidarSeVerdadeiro(bool value, string message)
+        {
+            if (!value)
+            {
+                throw new DomainException(message);
+            }
+        }
+
+        public static void ValidarSeFalso(bool value, string message)
+        {
+            if (value)
+            {
+                throw new DomainException(message);
+            }
+        }
+    }
+}
diff --git a/Estacionamento/Estacionamento.Domain/Entidades/Estacionamento/EstacionamentoBasico.cs b/Estacionamento/Estacionamento.Domain/Entidades/Estacionamento/EstacionamentoBasico.cs
index 779cf51..98c296c 100644
--- a/Estacionamento/Estacionamento.Domain/Entidades/Estacionamento/EstacionamentoBasico.cs
+++ b/Estacionamento/Estacionamento.Domain/Entidades/Estacionamento/EstacionamentoBasico.cs
@@ -4,6 +4,7 @@ namespace Estacionamento.Domain.Entidades.Estacionamento
 {
     public class EstacionamentoBasico
     {
+        public EstacionamentoBasico() { }
         public EstacionamentoBasico(DateTime dataAcesso, DateTime dataHoraEntrada, DateTime? dataHoraSaida, Veiculo veiculo)
         {
             DefinirDataAcesso(dataAcesso);
diff --git a/Estacionamento/Estacionamento.Domain/Entidades/Proprietario.cs b/Estacionamento/Estacionamento.Domain/Entidades/Proprietario.cs
index 2e28cb0..0435a36 100644
--- a/Estacionamento/Estacionamento.Domain/Entidades/Proprietario.cs
+++ b/Estacionamento/Estacionamento.Domain/Entidades/Proprietario.cs
@@ -1,48 +1,54 @@
-﻿using System;
+﻿using Estacionamento.Domain.DomainObjects;
+using System.Collections.Generic;
 
 namespace Estacionamento.Domain.Entidades
 {
-    public class Proprietario
+    public class Proprietario : Entity, IAggregateRoot
     {
-        public Proprietario(string nome, string endereco, string celular, string telefone, int cnh)
+        public Proprietario() { }
+
+        public Proprietario(string nome, string endereco, string celular, string telefone, int cnh) : base()
         {
             DefinirNome(nome);
             DefinirCnh(cnh);
             DefinirEndereco(endereco);
             DefinirCelular(celular);
             DefinirTelefone(telefone);
+
+            Validar();
         }
 
-        public Guid Id { get; private set; }
         public string Nome { get; private set; }
         public long NumeroCarteiraNacionalDeHabilitacao { get; private set; }
         public string Telefone { get; private set; }
         public string Celular { get; private set; }
         public string Endereco { get; private set; }
 
+        public ICollection<Veiculo> Veiculos { get; private set; }
+
         public void DefinirNome(string valor)
         {
-            this.Nome = valor;
+            Nome = valor;
         }
 
         public void DefinirCnh(long valor)
         {
-            this.NumeroCarteiraNacionalDeHabilitacao = valor;
+            NumeroCarteiraNacionalDeHabilitacao = valor;
         }
 
         public void DefinirTelefone(string valor)
         {
-            this.Telefone = valor;
+            Telefone = valor;
         }
 
         public void DefinirCelular(string valor)
         {
-            this.Celular = valor;
+            Celular = valor;
         }
 
         public void DefinirEndereco(string valor)
         {
-            this.Endereco = valor;
+            Endereco = valor;
         }
     }
 }
diff --git a/Estacionamento/Estacionamento.Domain/Entidades/Veiculo.cs b/Estacionamento/Estacionamento.Domain/Entidades/Veiculo.cs
index 00d6771..e35d1e5 100644
--- a/Estacionamento/Estacionamento.Domain/Entidades/Veiculo.cs
+++ b/Estacionamento/Estacionamento.Domain/Entidades/Veiculo.cs
@@ -1,42 +1,57 @@
-﻿using System;
+﻿using Estacionamento.Domain.DomainObjects;
+using Estacionamento.Domain.DomainObjects.Validations;
+using System;
 
 namespace Estacionamento.Domain.Entidades
 {
-    public class Veiculo
+    public class Veiculo : Entity, IAggregateRoot
     {
-        public Veiculo(string marca, string modelo, string placa)
+        public Veiculo() { }
+
+        public Veiculo(string marca, string modelo, string placa) : base()
         {
             DefinirPlaca(placa);
             DefinirMarca(marca);
             DefinirModelo(modelo);
+
+            Validar();
         }
 
-        public Guid Id { get; private set; }
         public string Marca { get; private set; }
         public string Modelo { get; private set; }
         public string Placa { get; private set; }
+        public Guid ProprietarioId { get; private set; }
 
-        public virtual Proprietario Proprietario { get; set; }
+        public Proprietario Proprietario { get; private set; }
 
 
         public void DefinirMarca(string marca)
         {
-            this.Marca = marca;
+            Marca = marca;
         }
 
         public void DefinirModelo(string modelo)
         {
-            this.Modelo = modelo;
+            Modelo = modelo;
         }
 
         public void DefinirPlaca(string placa)
         {
-            this.Placa = placa;
+            Placa = placa;
         }
 
         public void DefinirProprietario(Proprietario proprietario)
         {
-            this.Proprietario = proprietario;
+            Proprietario = proprietario;
+            ProprietarioId = proprietario.Id;
+        }
+
+        public override void Validar()
+        {
+            BaseValidations.ValidarExpressao(@"^[A-Z]{3}-\d{4}$|^[A-Z]{3}-[0-9][A-Z][0-9]{2}$", Placa, "");
+            BaseValidations.ValidarSeVazio(Modelo, "");
+            BaseValidations.ValidarSeVazio(Marca, "");
+            base.Validar();
         }
     }
 }
diff --git a/Estacionamento/Estacionamento.Domain/Interfaces/Repository/Data/IRepository.cs b/Estacionamento/Estacionamento.Domain/Interfaces/Repository/Data/IRepository.cs
new file mode 100644
index 0000000..70d58cf
--- /dev/null
+++ b/Estacionamento/Estacionamento.Domain/Interfaces/Repository/Data/IRepository.cs
@@ -0,0 +1,18 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Threading.Tasks;
+using Estacionamento.Domain.DomainObjects;
+
+namespace Estacionamento.Domain.Interfaces.Repository.Data
+{
+    public interface IRepository<T> : IDisposable where T : IAggregateRoot
+    {
+        IUnityOfWork UnityOfWork { get; }
+
+        Task<IEnumerable<T>> ObterTodos();
+        Task<T> ObterPorId(Guid id);
+
+        void Adicionar(T veiculo);
+        void Atualizar(T veiculo);
+    }
+}
diff --git a/Estacionamento/Estacionamento.Domain/Interfaces/Repository/Data/IUnityOfWork.cs b/Estacionamento/Estacionamento.Domain/Interfaces/Repository/Data/IUnityOfWork.cs
new file mode 100644
index 0000000..bfe661c
--- /dev/null
+++ b/Estacionamento/Estacionamento.Domain/Interfaces/Repository/Data/IUnityOfWork.cs
@@ -0,0 +1,9 @@
+﻿using System.Threading.Tasks;
+
+namespace Estacionamento.Domain.Interfaces.Repository.Data
+{
+    public interface IUnityOfWork
+    {
+        Task<bool> Commit();
+    }
+}
diff --git a/Estacionamento/Estacionamento.Domain/Interfaces/Repository/IVeiculoRepository.cs b/Estacionamento/Estacionamento.Domain/Interfaces/Repository/IVeiculoRepository.cs
new file mode 100644
index 0000000..55e1dd1
--- /dev/null
+++ b/Estacionamento/Estacionamento.Domain/Interfaces/Repository/IVeiculoRepository.cs
@@ -0,0 +1,13 @@
+﻿using Estacionamento.Domain.Interfaces.Repository.Data;
+using Estacionamento.Domain.Entidades;
+using System.Threading.Tasks;
+using System.Collections.Generic;
+using System;
+
+namespace Estacionamento.Domain.Interfaces.Repository
+{
+    public interface IVeiculoRepository : IRepository<Veiculo>
+    {
+        Task<IEnumerable<Veiculo>> ObterPorProprietario(Guid proprietarioId);
+    }
+}
diff --git a/Estacionamento/Estacionamento.Domain/Interfaces/Service/IService.cs b/Estacionamento/Estacionamento.Domain/Interfaces/Service/IService.cs
new file mode 100644
index 0000000..0f894af
--- /dev/null
+++ b/Estacionamento/Estacionamento.Domain/Interfaces/Service/IService.cs
@@ -0,0 +1,16 @@
+﻿using Estacionamento.Domain.DomainObjects;
+using System;
+using System.Collections.Generic;
+using System.Threading.Tasks;
+
+namespace Estacionamento.Domain.Interfaces.Service
+{
+    public interface IService<T> where T : IAggregateRoot
+    {
+        Task<IEnumerable<T>> ObterTodos();
+        Task<T> ObterPorId(Guid id);
+
+        void Adicionar(T veiculo);
+        void Atualizar(T veiculo);
+    }
+}
diff --git a/Estacionamento/Estacionamento.Domain/Interfaces/Service/IVeiculoService.cs b/Estacionamento/Estacionamento.Domain/Interfaces/Service/IVeiculoService.cs
new file mode 100644
index 0000000..a3926c6
--- /dev/null
+++ b/Estacionamento/Estacionamento.Domain/Interfaces/Service/IVeiculoService.cs
@@ -0,0 +1,12 @@
+﻿using Estacionamento.Domain.Entidades;
+using System;
+using System.Collections.Generic;
+using System.Threading.Tasks;
+
+namespace Estacionamento.Domain.Interfaces.Service
+{
+    public interface IVeiculoService : IService<Veiculo>
+    {
+        Task<IEnumerable<Veiculo>> ObterPorProprietario(Guid proprietarioId);
+    }
+}
diff --git a/Estacionamento/Estacionamento.Domain/Services/BaseService.cs b/Estacionamento/Estacionamento.Domain/Services/BaseService.cs
new file mode 100644
index 0000000..a0d72fc
--- /dev/null
+++ b/Estacionamento/Estacionamento.Domain/Services/BaseService.cs
@@ -0,0 +1,39 @@
+﻿using Estacionamento.Domain.DomainObjects;
+using Estacionamento.Domain.Interfaces.Repository.Data;
+using Estacionamento.Domain.Interfaces.Service;
+using System;
+using System.Collections.Generic;
+using System.Threading.Tasks;
+
+namespace Estacionamento.Domain.Services
+{
+    public abstract class BaseService<T> : IService <T> where T : IAggregateRoot
+    {
+        protected readonly IRepository<T> _baseRepository;
+
+        public BaseService(IRepository<T> repository)
+        {
+            _baseRepository = repository;
+        }
+
+        public async Task<T> ObterPorId(Guid id)
+        {
+            return await _baseRepository.ObterPorId(id);
+        }
+
+        public async Task<IEnumerable<T>> ObterTodos()
+        {
+            return await _baseRepository.ObterTodos();
+        }
+
+        public void Adicionar(T model)
+        {
+            _baseRepository.Adicionar(model);
+        }
+
+        public void Atualizar(T model)
+        {
+            _baseRepository.Atualizar(model);
+        }
+    }
+}
diff --git a/Estacionamento/Estacionamento.Domain/Services/VeiculoService.cs b/Estacionamento/Estacionamento.Domain/Services/VeiculoService.cs
new file mode 100644
index 0000000..9d3b334
--- /dev/null
+++ b/Estacionamento/Estacionamento.Domain/Services/VeiculoService.cs
@@ -0,0 +1,24 @@
+﻿using Estacionamento.Domain.Entidades;
+using Estacionamento.Domain.Interfaces.Repository;
+using Estacionamento.Domain.Interfaces.Service;
+using System;
+using System.Collections.Generic;
+using System.Threading.Tasks;
+
+namespace Estacionamento.Domain.Services
+{
+    public class VeiculoService : BaseService<Veiculo>, IVeiculoService
+    {
+        private readonly IVeiculoRepository _repository;
+
+        public VeiculoService(IVeiculoRepository repository) : base(repository)
+        {
+            _repository = repository;
+        }
+
+        public async Task<IEnumerable<Veiculo>> ObterPorProprietario(Guid proprietarioId)
+        {
+            return await _repository.ObterPorProprietario(proprietarioId);
+        }
+    }
+}
diff --git a/Estacionamento/Estacionamento.sln b/Estacionamento/Estacionamento.sln
index 7c54a74..dab0dc1 100644
--- a/Estacionamento/Estacionamento.sln
+++ b/Estacionamento/Estacionamento.sln
@@ -3,14 +3,22 @@ Microsoft Visual Studio Solution File, Format Version 12.00
 # Visual Studio Version 17
 VisualStudioVersion = 17.0.31903.59
 MinimumVisualStudioVersion = 10.0.40219.1
-Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Estacionamento.Domain", "Estacionamento.Domain\Estacionamento.Domain.csproj", "{294DB3CF-9745-4452-B0CA-52BE1DE8C626}"
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Estacionamento.Api", "Estacionamento.Api\Estacionamento.Api.csproj", "{2E74C0CF-B103-4F7F-ADD9-914F694DDD7C}"
 EndProject
-Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Estacionamento.App", "Estacionamento.Console\Estacionamento.App.csproj", "{87D4BCDA-BFB4-4B06-98EE-EA7138F6AA35}"
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Estacionamento.Domain", "Estacionamento.Domain\Estacionamento.Domain.csproj", "{294DB3CF-9745-4452-B0CA-52BE1DE8C626}"
 EndProject
 Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Estacionamento.Data", "Estacionamento.Data\Estacionamento.Data.csproj", "{2EE974E6-B5E0-48BA-B648-B5C76414B401}"
 EndProject
 Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Estacionamento.Tests", "Estacionamento.Tests\Estacionamento.Tests.csproj", "{8531A137-04E2-4063-BF18-11AF2C4841BB}"
 EndProject
+Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "2 - Estacionamento.Domain", "2 - Estacionamento.Domain", "{02EA681E-C7D8-13C7-8484-4AC65E1B71E8}"
+EndProject
+Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "3 - Estacionamento.Data", "3 - Estacionamento.Data", "{D8B3EEC5-8FAE-4EE7-A383-E79DC83AEA4A}"
+EndProject
+Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "4 - Estacionamento.Tests", "4 - Estacionamento.Tests", "{A3C3CA66-EA05-4363-BC7E-D383BB73CFE1}"
+EndProject
+Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "1 - Estacionamento.Api", "1 - Estacionamento.Api", "{52B5A784-BC3E-4567-9372-4F52B28FCF48}"
+EndProject
 Global
 	GlobalSection(SolutionConfigurationPlatforms) = preSolution
 		Debug|Any CPU = Debug|Any CPU
@@ -21,6 +29,18 @@ Global
 		Release|x86 = Release|x86
 	EndGlobalSection
 	GlobalSection(ProjectConfigurationPlatforms) = postSolution
+		{2E74C0CF-B103-4F7F-ADD9-914F694DDD7C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{2E74C0CF-B103-4F7F-ADD9-914F694DDD7C}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{2E74C0CF-B103-4F7F-ADD9-914F694DDD7C}.Debug|x64.ActiveCfg = Debug|Any CPU
+		{2E74C0CF-B103-4F7F-ADD9-914F694DDD7C}.Debug|x64.Build.0 = Debug|Any CPU
+		{2E74C0CF-B103-4F7F-ADD9-914F694DDD7C}.Debug|x86.ActiveCfg = Debug|Any CPU
+		{2E74C0CF-B103-4F7F-ADD9-914F694DDD7C}.Debug|x86.Build.0 = Debug|Any CPU
+		{2E74C0CF-B103-4F7F-ADD9-914F694DDD7C}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{2E74C0CF-B103-4F7F-ADD9-914F694DDD7C}.Release|Any CPU.Build.0 = Release|Any CPU
+		{2E74C0CF-B103-4F7F-ADD9-914F694DDD7C}.Release|x64.ActiveCfg = Release|Any CPU
+		{2E74C0CF-B103-4F7F-ADD9-914F694DDD7C}.Release|x64.Build.0 = Release|Any CPU
+		{2E74C0CF-B103-4F7F-ADD9-914F694DDD7C}.Release|x86.ActiveCfg = Release|Any CPU
+		{2E74C0CF-B103-4F7F-ADD9-914F694DDD7C}.Release|x86.Build.0 = Release|Any CPU
 		{294DB3CF-9745-4452-B0CA-52BE1DE8C626}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{294DB3CF-9745-4452-B0CA-52BE1DE8C626}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{294DB3CF-9745-4452-B0CA-52BE1DE8C626}.Debug|x64.ActiveCfg = Debug|Any CPU
@@ -73,6 +93,12 @@ Global
 	GlobalSection(SolutionProperties) = preSolution
 		HideSolutionNode = FALSE
 	EndGlobalSection
+	GlobalSection(NestedProjects) = preSolution
+		{2E74C0CF-B103-4F7F-ADD9-914F694DDD7C} = {52B5A784-BC3E-4567-9372-4F52B28FCF48}
+		{294DB3CF-9745-4452-B0CA-52BE1DE8C626} = {02EA681E-C7D8-13C7-8484-4AC65E1B71E8}
+		{2EE974E6-B5E0-48BA-B648-B5C76414B401} = {D8B3EEC5-8FAE-4EE7-A383-E79DC83AEA4A}
+		{8531A137-04E2-4063-BF18-11AF2C4841BB} = {A3C3CA66-EA05-4363-BC7E-D383BB73CFE1}
+	EndGlobalSection
 	GlobalSection(ExtensibilityGlobals) = postSolution
 		SolutionGuid = {F93DD13E-2619-4873-905C-1A29FE7D0335}
 	EndGlobalSection
diff --git a/Estacionamento/docker-compose.yml b/Estacionamento/docker-compose.yml
index 95ee4d1..af64e9e 100644
--- a/Estacionamento/docker-compose.yml
+++ b/Estacionamento/docker-compose.yml
@@ -1,6 +1,5 @@
 version: '3.8'
 
-
 services:
   db:
     container_name: db-sqlserver
@@ -23,15 +22,19 @@ services:
       context: ../Estacionamento
       dockerfile: ./Dockerfile
 
+    ports:
+      - 5000:80
     networks:
       - api-network
-
     depends_on:
       - db
 
+
 volumes:
   db_data:
     driver: local
+  app_data:
+    driver: local
 
 networks:
   api-network:
-- 
2.37.2.windows.2

